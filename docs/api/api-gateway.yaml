openapi: 3.0.3
info:
  title: API Gateway
  description: |
    Central API Gateway for the multi-service platform.
    Handles request routing, authentication, rate limiting, and service orchestration.
  version: 1.0.0
  contact:
    name: Platform Team
    email: platform@company.com

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api-staging.company.com
    description: Staging server
  - url: https://api.company.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Gateway health check
      tags: [Health]
      security: []
      responses:
        '200':
          description: Gateway is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayHealthResponse'

  /services/status:
    get:
      summary: Get status of all services
      tags: [Service Management]
      responses:
        '200':
          description: Service status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesStatusResponse'

  # Authentication Service Routes
  /auth/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Authentication Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to authentication service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Payment Service Routes
  /payments/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Payment Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to payment service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Ecommerce Service Routes
  /ecommerce/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Ecommerce Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to ecommerce service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Taxi Service Routes
  /taxi/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Taxi Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to taxi service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Hotel Service Routes
  /hotels/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Hotel Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to hotel service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # File Service Routes
  /files/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to File Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to file service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Search Service Routes
  /search/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Search Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to search service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Notification Service Routes
  /notifications/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Notification Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to notification service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Analytics Service Routes
  /analytics/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Analytics Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to analytics service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Advertisement Service Routes
  /ads/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Advertisement Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to advertisement service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # Admin Service Routes
  /admin/{proxy+}:
    x-amazon-apigateway-any-method:
      summary: Proxy to Admin Service
      tags: [Proxy Routes]
      parameters:
        - name: proxy+
          in: path
          required: true
          schema:
            type: string
          description: Path to proxy to admin service
      responses:
        '200':
          description: Request proxied successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '500':
          description: Internal server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    GatewayHealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        uptime:
          type: number
          example: 3600
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, unknown]
          example: "healthy"
        responseTime:
          type: number
          example: 45
        lastCheck:
          type: string
          format: date-time

    ServicesStatusResponse:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceStatus'
        totalServices:
          type: integer
          example: 12
        healthyServices:
          type: integer
          example: 11
        unhealthyServices:
          type: integer
          example: 1

    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          example: "authentication-service"
        url:
          type: string
          example: "http://auth-service:3001"
        status:
          type: string
          enum: [healthy, unhealthy, unknown]
          example: "healthy"
        version:
          type: string
          example: "1.0.0"
        responseTime:
          type: number
          example: 45
        lastCheck:
          type: string
          format: date-time
        endpoints:
          type: array
          items:
            type: string
          example: ["/health", "/register", "/login"]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "GATEWAY_ERROR"
        message:
          type: string
          example: "Service temporarily unavailable"
        service:
          type: string
          example: "payment-service"
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          example: "trace_123456"

tags:
  - name: Health
    description: Gateway health and monitoring
  - name: Service Management
    description: Service discovery and status
  - name: Proxy Routes
    description: Routes that proxy to backend services