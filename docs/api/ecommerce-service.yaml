openapi: 3.0.3
info:
  title: Ecommerce Service API
  description: |
    Comprehensive ecommerce service with product catalog, shopping cart, order management, and vendor capabilities.
    Supports multi-vendor marketplace functionality similar to Amazon/Jumia.
  version: 1.0.0
  contact:
    name: Platform Team
    email: platform@company.com

servers:
  - url: http://localhost:3003
    description: Development server
  - url: https://api-staging.company.com/ecommerce
    description: Staging server
  - url: https://api.company.com/ecommerce
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # Product Management
  /products:
    get:
      summary: Get products with filtering and pagination
      tags: [Products]
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: vendor
          in: query
          schema:
            type: string
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: search
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, rating_desc, created_desc]
            default: created_desc
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'

    post:
      summary: Create new product (vendor only)
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Vendor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{productId}:
    get:
      summary: Get product details
      tags: [Products]
      security: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update product (vendor only)
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Not authorized to update this product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product (vendor only)
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Not authorized to delete this product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Categories
  /categories:
    get:
      summary: Get all categories
      tags: [Categories]
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create new category (admin only)
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Shopping Cart
  /cart:
    get:
      summary: Get user's shopping cart
      tags: [Shopping Cart]
      responses:
        '200':
          description: Shopping cart retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'

    post:
      summary: Add item to cart
      tags: [Shopping Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '400':
          description: Invalid request or insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update cart item quantity
      tags: [Shopping Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'

    delete:
      summary: Clear shopping cart
      tags: [Shopping Cart]
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /cart/items/{itemId}:
    delete:
      summary: Remove item from cart
      tags: [Shopping Cart]
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Orders
  /orders:
    get:
      summary: Get user's order history
      tags: [Orders]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order history retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderHistoryResponse'

    post:
      summary: Create new order from cart
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data or empty cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      summary: Get order details
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update order status (vendor/admin only)
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Not authorized to update this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/cancel:
    post:
      summary: Cancel order
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Reviews
  /products/{productId}/reviews:
    get:
      summary: Get product reviews
      tags: [Reviews]
      security: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Product reviews retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewListResponse'

    post:
      summary: Add product review
      tags: [Reviews]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid review data or user hasn't purchased product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Vendor Dashboard
  /vendor/products:
    get:
      summary: Get vendor's products
      tags: [Vendor Dashboard]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Vendor products retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '403':
          description: Vendor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /vendor/orders:
    get:
      summary: Get vendor's orders
      tags: [Vendor Dashboard]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Vendor orders retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderHistoryResponse'
        '403':
          description: Vendor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /vendor/analytics:
    get:
      summary: Get vendor analytics
      tags: [Vendor Dashboard]
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Vendor analytics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorAnalytics'
        '403':
          description: Vendor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"

    Product:
      type: object
      properties:
        id:
          type: string
          example: "prod_123456"
        name:
          type: string
          example: "Wireless Bluetooth Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          example: 99.99
        currency:
          type: string
          example: "USD"
        categoryId:
          type: string
          example: "cat_electronics"
        vendorId:
          type: string
          example: "vendor_123456"
        vendorName:
          type: string
          example: "TechStore Inc"
        sku:
          type: string
          example: "WBH-001"
        stock:
          type: integer
          example: 50
        images:
          type: array
          items:
            type: string
          example: ["https://cdn.example.com/image1.jpg", "https://cdn.example.com/image2.jpg"]
        rating:
          type: number
          example: 4.5
        reviewCount:
          type: integer
          example: 128
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductDetails:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            specifications:
              type: object
              additionalProperties: true
              example:
                brand: "AudioTech"
                color: "Black"
                weight: "250g"
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ProductVariant'
            relatedProducts:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    ProductVariant:
      type: object
      properties:
        id:
          type: string
          example: "var_123456"
        name:
          type: string
          example: "Black - Large"
        price:
          type: number
          example: 109.99
        stock:
          type: integer
          example: 25
        attributes:
          type: object
          additionalProperties: true
          example:
            color: "Black"
            size: "Large"

    CreateProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - currency
        - categoryId
        - sku
        - stock
      properties:
        name:
          type: string
          example: "Wireless Bluetooth Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          example: 99.99
        currency:
          type: string
          example: "USD"
        categoryId:
          type: string
          example: "cat_electronics"
        sku:
          type: string
          example: "WBH-001"
        stock:
          type: integer
          example: 50
        images:
          type: array
          items:
            type: string
        specifications:
          type: object
          additionalProperties: true

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        images:
          type: array
          items:
            type: string
        specifications:
          type: object
          additionalProperties: true
        isActive:
          type: boolean

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        filters:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
            priceRange:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number

    Category:
      type: object
      properties:
        id:
          type: string
          example: "cat_electronics"
        name:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "Electronic devices and accessories"
        parentId:
          type: string
          example: "cat_root"
        imageUrl:
          type: string
          example: "https://cdn.example.com/category-electronics.jpg"
        isActive:
          type: boolean
          example: true

    CreateCategoryRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "Electronic devices and accessories"
        parentId:
          type: string
          example: "cat_root"
        imageUrl:
          type: string

    ShoppingCart:
      type: object
      properties:
        id:
          type: string
          example: "cart_123456"
        userId:
          type: string
          example: "user_123456"
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalItems:
          type: integer
          example: 3
        subtotal:
          type: number
          example: 299.97
        tax:
          type: number
          example: 24.00
        total:
          type: number
          example: 323.97
        currency:
          type: string
          example: "USD"
        updatedAt:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: string
          example: "item_123456"
        productId:
          type: string
          example: "prod_123456"
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        unitPrice:
          type: number
          example: 99.99
        totalPrice:
          type: number
          example: 199.98
        variantId:
          type: string
          example: "var_123456"

    AddToCartRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          example: "prod_123456"
        quantity:
          type: integer
          example: 1
        variantId:
          type: string
          example: "var_123456"

    UpdateCartItemRequest:
      type: object
      required:
        - itemId
        - quantity
      properties:
        itemId:
          type: string
          example: "item_123456"
        quantity:
          type: integer
          example: 3

    Order:
      type: object
      properties:
        id:
          type: string
          example: "order_123456"
        userId:
          type: string
          example: "user_123456"
        status:
          type: string
          enum: [pending, confirmed, processing, shipped, delivered, cancelled]
          example: "confirmed"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        subtotal:
          type: number
          example: 299.97
        tax:
          type: number
          example: 24.00
        shipping:
          type: number
          example: 9.99
        total:
          type: number
          example: 333.96
        currency:
          type: string
          example: "USD"
        paymentId:
          type: string
          example: "pay_123456"
        trackingNumber:
          type: string
          example: "TRK123456789"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderDetails:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            statusHistory:
              type: array
              items:
                $ref: '#/components/schemas/OrderStatusHistory'

    OrderItem:
      type: object
      properties:
        id:
          type: string
          example: "orderitem_123456"
        productId:
          type: string
          example: "prod_123456"
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        unitPrice:
          type: number
          example: 99.99
        totalPrice:
          type: number
          example: 199.98
        variantId:
          type: string
          example: "var_123456"

    OrderStatusHistory:
      type: object
      properties:
        status:
          type: string
          example: "shipped"
        timestamp:
          type: string
          format: date-time
        note:
          type: string
          example: "Order shipped via FedEx"

    CreateOrderRequest:
      type: object
      required:
        - shippingAddress
        - paymentMethodId
      properties:
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentMethodId:
          type: string
          example: "pm_123456"
        notes:
          type: string
          example: "Please leave at front door"

    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [confirmed, processing, shipped, delivered, cancelled]
          example: "shipped"
        trackingNumber:
          type: string
          example: "TRK123456789"
        note:
          type: string
          example: "Order shipped via FedEx"

    CancelOrderRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          example: "Customer requested cancellation"

    Address:
      type: object
      required:
        - firstName
        - lastName
        - street1
        - city
        - state
        - postalCode
        - country
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        company:
          type: string
          example: "Acme Corp"
        street1:
          type: string
          example: "123 Main St"
        street2:
          type: string
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        phone:
          type: string
          example: "+1234567890"

    OrderHistoryResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    Review:
      type: object
      properties:
        id:
          type: string
          example: "review_123456"
        productId:
          type: string
          example: "prod_123456"
        userId:
          type: string
          example: "user_123456"
        userName:
          type: string
          example: "John D."
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        title:
          type: string
          example: "Excellent product!"
        comment:
          type: string
          example: "Great quality headphones, highly recommended."
        images:
          type: array
          items:
            type: string
          example: ["https://cdn.example.com/review1.jpg"]
        verified:
          type: boolean
          example: true
        helpful:
          type: integer
          example: 12
        createdAt:
          type: string
          format: date-time

    CreateReviewRequest:
      type: object
      required:
        - rating
        - title
        - comment
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        title:
          type: string
          example: "Excellent product!"
        comment:
          type: string
          example: "Great quality headphones, highly recommended."
        images:
          type: array
          items:
            type: string

    ReviewListResponse:
      type: object
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        summary:
          type: object
          properties:
            averageRating:
              type: number
              example: 4.3
            totalReviews:
              type: integer
              example: 128
            ratingDistribution:
              type: object
              properties:
                "5":
                  type: integer
                  example: 65
                "4":
                  type: integer
                  example: 32
                "3":
                  type: integer
                  example: 20
                "2":
                  type: integer
                  example: 8
                "1":
                  type: integer
                  example: 3

    VendorAnalytics:
      type: object
      properties:
        period:
          type: string
          example: "month"
        totalSales:
          type: number
          example: 15420.50
        totalOrders:
          type: integer
          example: 156
        averageOrderValue:
          type: number
          example: 98.85
        topProducts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              productName:
                type: string
              sales:
                type: number
              orders:
                type: integer
        salesChart:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              sales:
                type: number
              orders:
                type: integer

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          example: "trace_123456"

tags:
  - name: Health
    description: Service health endpoints
  - name: Products
    description: Product catalog management
  - name: Categories
    description: Product category management
  - name: Shopping Cart
    description: Shopping cart operations
  - name: Orders
    description: Order management
  - name: Reviews
    description: Product reviews and ratings
  - name: Vendor Dashboard
    description: Vendor management interface