# Staging values for API Gateway
replicaCount: 2

image:
  repository: ghcr.io/your-org/your-repo/api-gateway
  pullPolicy: Always
  tag: "develop"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 3000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: api-staging.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: api-gateway-staging-tls
      hosts:
        - api-staging.yourdomain.com

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment-specific configuration
env:
  NODE_ENV: staging
  LOG_LEVEL: debug
  PORT: 3000
  
# Database configuration
database:
  host: postgresql
  port: 5432
  name: api_gateway_staging
  
# Redis configuration
redis:
  host: redis-master
  port: 6379
  
# RabbitMQ configuration
rabbitmq:
  host: rabbitmq
  port: 5672
  
# Rate limiting (more lenient for testing)
rateLimit:
  windowMs: 60000
  max: 200
  
# CORS configuration (more permissive for testing)
cors:
  origin: ["https://staging.yourdomain.com", "http://localhost:3000"]
  credentials: true

# Health check configuration
healthCheck:
  enabled: true
  path: /health
  
# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics