{
  "name": "giga-multi-service-platform",
  "version": "1.0.0",
  "description": "Multi-service platform with ecommerce, taxi, hotel, payment, and advertisement services",
  "private": true,
  "workspaces": [
    "packages/*",
    "services/*"
  ],
  "scripts": {
    "build": "pnpm run build -r",
    "build:common": "pnpm run build --filter=@platform/common",
    "build:services": "pnpm run build -r --filter='!@platform/common'",
    "dev": "pnpm run dev -r",
    "dev:gateway": "pnpm run dev --filter=@platform/api-gateway",
    "dev:auth": "pnpm run dev --filter=@platform/authentication-service",
    "dev:ecommerce": "pnpm run dev --filter=@platform/ecommerce-service",
    "dev:payment": "pnpm run dev --filter=@platform/payment-service",
    "dev:taxi": "pnpm run dev --filter=@platform/taxi-service",
    "dev:hotel": "pnpm run dev --filter=@platform/hotel-service",
    "dev:advertisement": "pnpm run dev --filter=@platform/advertisement-service",
    "dev:notification": "pnpm run dev --filter=@platform/notification-service",
    "dev:file": "pnpm run dev --filter=@platform/file-service",
    "dev:search": "pnpm run dev --filter=@platform/search-service",
    "dev:admin": "pnpm run dev --filter=@platform/admin-service",
    "dev:analytics": "pnpm run dev --filter=@platform/analytics-service",
    "dev:messaging": "pnpm run dev --filter=@platform/messaging-service",
    "test": "pnpm run test -r",
    "test:unit": "pnpm run test:unit -r",
    "test:integration": "pnpm run test:integration -r",
    "test:contract": "cd tests && npm run test:contract",
    "test:e2e": "cd tests && npm run test:e2e",
    "test:performance": "cd tests && npm run test:performance",
    "test:stress": "cd tests && npm run test:stress",
    "test:coverage": "pnpm run test:coverage -r",
    "test:comprehensive": "./tests/run-tests.sh",
    "test:ci": "cd tests && npm run test:ci",
    "lint": "pnpm run lint -r",
    "lint:fix": "pnpm run lint:fix -r",
    "clean": "pnpm run clean -r && rm -rf node_modules",
    "setup": "pnpm install && cp .env.example .env",
    "install:all": "pnpm install -r",
    "install:root": "pnpm install",
    "install:workspaces": "pnpm install -r --filter='!.'",
    "install:fresh": "pnpm run clean && pnpm install -r",
    "bootstrap": "pnpm install:all && pnpm run build:common && cp .env.example .env",
    "start:platform": "./start-platform.sh",
    "start:essential": "./start-platform.sh essential",
    "start:full": "./start-platform.sh full",
    "start:search": "./start-platform.sh search",
    "start:admin": "./start-platform.sh admin",
    "start:monitoring": "./start-platform.sh monitoring",
    "start:infra": "./start-platform.sh infra",
    "stop": "./start-platform.sh stop",
    "status": "./start-platform.sh status",
    "logs": "./start-platform.sh logs",
    "clean:docker": "./start-platform.sh clean",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:build": "docker-compose build",
    "docker:build:clean": "./scripts/docker-clean-build.sh",
    "docker:logs": "docker-compose logs -f",
    "docker:ps": "docker-compose ps",
    "health:check": "curl -f http://localhost:3000/health",
    "health:all": "for port in 3001 3002 3003 3004 3005 3006 3007 3008; do echo \"Port $port: $(curl -s http://localhost:$port/health | jq -r '.status // \"ERROR\"')\"; done",
    "validate:all": "pnpm run lint && pnpm run test",
    "docs:generate": "node scripts/generate-docs.js",
    "docs:typedoc": "typedoc",
    "docs:jsdoc": "jsdoc -c jsdoc.json",
    "docs:api": "node scripts/generate-api-docs.js",
    "docs:serve": "cd docs/generated && python3 -m http.server 8080",
    "docs:clean": "rm -rf docs/generated/*",
    "docs:all": "pnpm run docs:clean && pnpm run docs:generate && pnpm run docs:typedoc"
  },
  "devDependencies": {
    "@types/http-status": "^0.2.30",
    "@types/jest": "^29.5.2",
    "@types/mongoose": "^5.11.96",
    "@types/pg": "^8.10.2",
    "@types/bcryptjs": "^2.4.2",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.6",
    "concurrently": "^8.2.0",
    "eslint": "^8.45.0",
    "@typescript-eslint/eslint-plugin": "^6.2.1",
    "@typescript-eslint/parser": "^6.2.1",
    "jest": "^29.6.2",
    "husky": "^8.0.3",
    "lint-staged": "^13.2.3",
    "mongodb": "^5.7.0",
    "pg": "^8.11.1",
    "bcryptjs": "^2.4.3",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^4.6.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "keywords": [
    "microservices",
    "ecommerce",
    "taxi",
    "hotel",
    "payment",
    "advertisement",
    "nodejs",
    "typescript",
    "docker"
  ],
  "author": "Giga Platform Team",
  "license": "MIT"
}