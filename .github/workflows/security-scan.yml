name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'giga_main',
          'giga_taxi_main',
          'giga_taxi_driver',
          'ecommerce-backend',
          'advertisement-service',
          'hotel-service',
          'payment-service',
          'common',
          'packages/common',
          'services/admin-service',
          'services/analytics-service',
          'services/api-gateway',
          'services/authentication-service',
          'services/file-service',
          'services/messaging-service',
          'services/notification-service',
          'services/payment-service',
          'services/search-service',
          'services/taxi-service'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found in ${{ matrix.service }}, skipping..."
            exit 0
          fi

      - name: Run npm audit
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f "package.json" ]; then
            npm audit --audit-level=moderate --production
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.service }}/package.json

  code-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  docker-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [
          'giga_main',
          'giga_taxi_main',
          'giga_taxi_driver',
          'ecommerce-backend',
          'advertisement-service',
          'hotel-service',
          'payment-service'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ matrix.service }}:scan
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  license-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "Checking licenses for all services..."
          
          services=("giga_main" "giga_taxi_main" "giga_taxi_driver" "ecommerce-backend" "advertisement-service" "hotel-service" "payment-service" "common" "packages/common")
          
          for service in "${services[@]}"; do
            if [ -f "$service/package.json" ]; then
              echo "Checking licenses for $service..."
              cd "$service"
              license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages || true
              cd ..
            fi
          done

  security-report:
    needs: [dependency-scan, code-scan, secret-scan, docker-scan, license-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate security report
        run: |
          echo "Security Scan Summary" > security-report.md
          echo "====================" >> security-report.md
          echo "" >> security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "Scan Results:" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Docker Scan: ${{ needs.docker-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md