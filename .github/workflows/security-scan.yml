name: Security Scanning

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - containers
          - secrets

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      should-run-full: ${{ steps.check-scan-type.outputs.should-run-full }}
      should-run-deps: ${{ steps.check-scan-type.outputs.should-run-deps }}
      should-run-code: ${{ steps.check-scan-type.outputs.should-run-code }}
      should-run-containers: ${{ steps.check-scan-type.outputs.should-run-containers }}
      should-run-secrets: ${{ steps.check-scan-type.outputs.should-run-secrets }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check scan type
        id: check-scan-type
        run: |
          scan_type="${{ github.event.inputs.scan_type || 'full' }}"
          
          if [[ "$scan_type" == "full" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "should-run-full=true" >> $GITHUB_OUTPUT
            echo "should-run-deps=true" >> $GITHUB_OUTPUT
            echo "should-run-code=true" >> $GITHUB_OUTPUT
            echo "should-run-containers=true" >> $GITHUB_OUTPUT
            echo "should-run-secrets=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-full=false" >> $GITHUB_OUTPUT
            echo "should-run-deps=$([[ '$scan_type' == 'dependencies' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
            echo "should-run-code=$([[ '$scan_type' == 'code' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
            echo "should-run-containers=$([[ '$scan_type' == 'containers' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
            echo "should-run-secrets=$([[ '$scan_type' == 'secrets' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          fi

      - name: Set up service matrix
        id: set-matrix
        run: |
          services='[
            {"name": "api-gateway", "path": "services/api-gateway", "critical": true},
            {"name": "authentication-service", "path": "services/authentication-service", "critical": true},
            {"name": "payment-service", "path": "services/payment-service", "critical": true},
            {"name": "ecommerce-service", "path": "services/ecommerce-service", "critical": true},
            {"name": "taxi-service", "path": "services/taxi-service", "critical": true},
            {"name": "hotel-service", "path": "services/hotel-service", "critical": true},
            {"name": "notification-service", "path": "services/notification-service", "critical": false},
            {"name": "search-service", "path": "services/search-service", "critical": false},
            {"name": "file-service", "path": "services/file-service", "critical": false},
            {"name": "analytics-service", "path": "services/analytics-service", "critical": false},
            {"name": "advertisement-service", "path": "services/advertisement-service", "critical": false},
            {"name": "admin-service", "path": "services/admin-service", "critical": false},
            {"name": "messaging-service", "path": "services/messaging-service", "critical": false},
            {"name": "data-governance-admin", "path": "services/data-governance-admin", "critical": false},
            {"name": "common", "path": "packages/common", "critical": true}
          ]'
          
          echo "services=$services" >> $GITHUB_OUTPUT

  dependency-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-deps == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup-matrix.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service.path }}" ] && [ -f "${{ matrix.service.path }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        continue-on-error: true
        run: |
          echo "Running pnpm audit for ${{ matrix.service.name }}..."
          pnpm audit --audit-level=moderate --prod --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          if [ -s audit-results.json ]; then
            echo "Vulnerabilities found in ${{ matrix.service.name }}:"
            cat audit-results.json
          else
            echo "No vulnerabilities found in ${{ matrix.service.name }}"
          fi

      - name: Run Snyk security scan
        if: steps.check-service.outputs.exists == 'true'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.service.path }}/package.json --json-file-output=snyk-results.json

      - name: Upload Snyk results
        if: steps.check-service.outputs.exists == 'true' && hashFiles('snyk-results.json') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results.json
          category: snyk-${{ matrix.service.name }}

      - name: Check for known security advisories
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Checking for known security advisories..."
          if command -v npm &> /dev/null; then
            npm audit --audit-level=high --production || true
          fi

      - name: Generate dependency report
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Generating dependency report for ${{ matrix.service.name }}..."
          pnpm list --depth=0 --json > dependencies.json || true
          
          # Count dependencies
          if [ -f dependencies.json ]; then
            dep_count=$(jq '.dependencies | length' dependencies.json 2>/dev/null || echo "0")
            echo "Service ${{ matrix.service.name }} has $dep_count direct dependencies"
          fi

      - name: Upload dependency artifacts
        if: steps.check-service.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ matrix.service.name }}
          path: |
            ${{ matrix.service.path }}/audit-results.json
            ${{ matrix.service.path }}/dependencies.json
            snyk-results.json
          retention-days: 30

  code-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-code == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build services for analysis
        run: |
          echo "Building services for CodeQL analysis..."
          pnpm run build --if-present || true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/nodejs
            p/typescript
            p/docker
            p/kubernetes
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep-code-scan

      - name: Run ESLint security rules
        run: |
          echo "Running ESLint with security rules..."
          pnpm exec eslint . --ext .js,.ts --format json --output-file eslint-security.json || true
          
          # Convert ESLint results to readable format
          if [ -f eslint-security.json ]; then
            echo "ESLint security issues found:"
            cat eslint-security.json | jq '.[] | select(.messages | length > 0) | {filePath, messages: .messages | map(select(.ruleId | contains("security")))}' || true
          fi
        continue-on-error: true

      - name: Upload code scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-scan-results
          path: |
            eslint-security.json
            semgrep.sarif
          retention-days: 30

  secret-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-secrets == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --output=trufflehog-results.json

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Scan for hardcoded secrets in config files
        run: |
          echo "Scanning for potential secrets in configuration files..."
          
          # Check for common secret patterns in config files
          find . -name "*.env*" -o -name "*.config.*" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" | \
          grep -v node_modules | \
          grep -v .git | \
          while read file; do
            echo "Checking $file for potential secrets..."
            
            # Look for common secret patterns
            grep -i -E "(password|secret|key|token|api_key)" "$file" | \
            grep -v -E "(example|template|placeholder|YOUR_|REPLACE_)" || true
          done

      - name: Check for exposed credentials in Docker files
        run: |
          echo "Checking Docker files for exposed credentials..."
          find . -name "Dockerfile*" -o -name "docker-compose*.yml" | \
          while read file; do
            echo "Checking $file..."
            grep -i -E "(password|secret|key|token)" "$file" || true
          done

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            results.sarif
          retention-days: 30

  container-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-containers == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup-matrix.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if service has Dockerfile
        id: check-dockerfile
        run: |
          if [ -f "${{ matrix.service.path }}/Dockerfile" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          file: ${{ matrix.service.path }}/Dockerfile
          push: false
          tags: ${{ matrix.service.name }}:security-scan
          load: true
          cache-from: type=gha,scope=${{ matrix.service.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}

      - name: Run Trivy vulnerability scanner
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service.name }}:security-scan
          format: 'sarif'
          output: 'trivy-image-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ matrix.service.path }}'
          format: 'sarif'
          output: 'trivy-fs-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Grype vulnerability scanner
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: anchore/scan-action@v3
        with:
          image: ${{ matrix.service.name }}:security-scan
          fail-build: false
          output-format: sarif
          output-file: grype-${{ matrix.service.name }}.sarif

      - name: Upload Trivy image scan results
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-${{ matrix.service.name }}.sarif'
          category: 'trivy-image-${{ matrix.service.name }}'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-${{ matrix.service.name }}.sarif'
          category: 'trivy-fs-${{ matrix.service.name }}'

      - name: Upload Grype scan results
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-${{ matrix.service.name }}.sarif'
          category: 'grype-${{ matrix.service.name }}'

      - name: Generate SBOM
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ matrix.service.name }}:security-scan
          format: spdx-json
          output-file: sbom-${{ matrix.service.name }}.spdx.json

      - name: Upload container scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-${{ matrix.service.name }}
          path: |
            trivy-image-${{ matrix.service.name }}.sarif
            trivy-fs-${{ matrix.service.name }}.sarif
            grype-${{ matrix.service.name }}.sarif
            sbom-${{ matrix.service.name }}.spdx.json
          retention-days: 30

  license-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-full == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: npm install -g license-checker license-checker-rseidelsohn

      - name: Check licenses for all services
        run: |
          echo "Checking licenses for all services..."
          
          # Allowed licenses (permissive licenses only)
          allowed_licenses="MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;CC0-1.0"
          
          # Create license report
          echo "# License Compliance Report" > license-report.md
          echo "Generated: $(date)" >> license-report.md
          echo "" >> license-report.md
          
          services=$(find services -name "package.json" -exec dirname {} \; | sort)
          
          for service_path in $services; do
            service_name=$(basename "$service_path")
            echo "Checking licenses for $service_name..."
            echo "## $service_name" >> license-report.md
            
            if [ -f "$service_path/package.json" ]; then
              cd "$service_path"
              
              # Generate license report
              license-checker --json --excludePrivatePackages > licenses.json 2>/dev/null || true
              
              if [ -f licenses.json ]; then
                # Check for non-compliant licenses
                non_compliant=$(license-checker --onlyAllow "$allowed_licenses" --excludePrivatePackages 2>&1 | grep -v "└─" || true)
                
                if [ -n "$non_compliant" ]; then
                  echo "⚠️ Non-compliant licenses found:" >> ../license-report.md
                  echo '```' >> ../license-report.md
                  echo "$non_compliant" >> ../license-report.md
                  echo '```' >> ../license-report.md
                else
                  echo "✅ All licenses compliant" >> ../license-report.md
                fi
                
                # Count licenses
                license_count=$(jq 'keys | length' licenses.json 2>/dev/null || echo "0")
                echo "Total dependencies: $license_count" >> ../license-report.md
                echo "" >> ../license-report.md
              fi
              
              cd - > /dev/null
            fi
          done
          
          # Check packages/common
          if [ -f "packages/common/package.json" ]; then
            echo "Checking licenses for common package..."
            echo "## Common Package" >> license-report.md
            cd packages/common
            license-checker --onlyAllow "$allowed_licenses" --excludePrivatePackages >> ../license-report.md 2>&1 || true
            cd - > /dev/null
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.md
          retention-days: 90

  infrastructure-scan:
    needs: setup-matrix
    if: needs.setup-matrix.outputs.should-run-full == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov for IaC security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov-iac-scan

      - name: Scan Kubernetes manifests
        run: |
          echo "Scanning Kubernetes manifests for security issues..."
          
          if [ -d "k8s" ]; then
            # Use kube-score to analyze Kubernetes manifests
            docker run --rm -v "$(pwd)/k8s:/k8s" zegl/kube-score:latest score /k8s/**/*.yaml > kube-score-results.txt 2>&1 || true
            
            echo "Kubernetes security analysis results:"
            cat kube-score-results.txt
          fi

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-scan-results
          path: |
            checkov-results.sarif
            kube-score-results.txt
          retention-days: 30

  security-report:
    needs: [dependency-scan, code-scan, secret-scan, container-scan, license-scan, infrastructure-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate comprehensive security report
        run: |
          echo "# Security Scan Summary Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "Branch: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results Overview" >> security-report.md
          echo "| Scan Type | Status | Critical Issues | High Issues |" >> security-report.md
          echo "|-----------|--------|-----------------|-------------|" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | TBD | TBD |" >> security-report.md
          echo "| Code Scan | ${{ needs.code-scan.result }} | TBD | TBD |" >> security-report.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} | TBD | TBD |" >> security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result }} | TBD | TBD |" >> security-report.md
          echo "| License Scan | ${{ needs.license-scan.result }} | TBD | TBD |" >> security-report.md
          echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} | TBD | TBD |" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Critical Findings" >> security-report.md
          echo "Review the uploaded SARIF files for detailed vulnerability information." >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review and remediate all CRITICAL and HIGH severity vulnerabilities" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Rotate any exposed secrets or credentials" >> security-report.md
          echo "4. Review license compliance issues" >> security-report.md
          echo "5. Address infrastructure security misconfigurations" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Artifacts" >> security-report.md
          echo "The following artifacts contain detailed scan results:" >> security-report.md
          find security-artifacts -name "*.sarif" -o -name "*.json" -o -name "*.txt" -o -name "*.md" | while read file; do
            echo "- $(basename "$file")" >> security-report.md
          done

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: |
            security-report.md
            security-artifacts/
          retention-days: 90

      - name: Check for critical security issues
        run: |
          critical_issues=false
          
          # Check if any critical scans failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] && [[ "${{ matrix.service.critical }}" == "true" ]]; then
            echo "❌ Critical dependency scan failed"
            critical_issues=true
          fi
          
          if [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "❌ Secret scan failed - potential credential exposure"
            critical_issues=true
          fi
          
          if [[ "$critical_issues" == "true" ]]; then
            echo "🚨 Critical security issues detected - review required"
            exit 1
          else
            echo "✅ No critical security issues detected"
          fi

      - name: Notify security team
        if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Critical security issues detected in ${{ github.repository }} - Immediate review required"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}